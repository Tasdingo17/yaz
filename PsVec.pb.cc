// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PsVec.proto

#include "PsVec.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PsVec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendProbeStamp_PsVec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace PsVec {
class SendProbeStampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendProbeStamp> _instance;
} _SendProbeStamp_default_instance_;
class SendProbeStampVecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendProbeStampVec> _instance;
} _SendProbeStampVec_default_instance_;
}  // namespace PsVec
static void InitDefaultsscc_info_SendProbeStamp_PsVec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PsVec::_SendProbeStamp_default_instance_;
    new (ptr) ::PsVec::SendProbeStamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PsVec::SendProbeStamp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendProbeStamp_PsVec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendProbeStamp_PsVec_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SendProbeStampVec_PsVec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PsVec::_SendProbeStampVec_default_instance_;
    new (ptr) ::PsVec::SendProbeStampVec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PsVec::SendProbeStampVec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendProbeStampVec_PsVec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendProbeStampVec_PsVec_2eproto}, {
      &scc_info_SendProbeStamp_PsVec_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PsVec_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PsVec_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PsVec_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PsVec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PsVec::SendProbeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PsVec::SendProbeStamp, m_stream_),
  PROTOBUF_FIELD_OFFSET(::PsVec::SendProbeStamp, m_sequence_),
  PROTOBUF_FIELD_OFFSET(::PsVec::SendProbeStamp, m_ttl_),
  PROTOBUF_FIELD_OFFSET(::PsVec::SendProbeStamp, m_tv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PsVec::SendProbeStampVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PsVec::SendProbeStampVec, m_app_probes_ptr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PsVec::SendProbeStamp)},
  { 9, -1, sizeof(::PsVec::SendProbeStampVec)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PsVec::_SendProbeStamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PsVec::_SendProbeStampVec_default_instance_),
};

const char descriptor_table_protodef_PsVec_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013PsVec.proto\022\005PsVec\032\037google/protobuf/ti"
  "mestamp.proto\"o\n\016SendProbeStamp\022\020\n\010m_str"
  "eam\030\001 \001(\r\022\022\n\nm_sequence\030\002 \001(\r\022\r\n\005m_ttl\030\003"
  " \001(\r\022(\n\004m_tv\030\004 \001(\0132\032.google.protobuf.Tim"
  "estamp\"D\n\021SendProbeStampVec\022/\n\020m_app_pro"
  "bes_ptr\030\001 \003(\0132\025.PsVec.SendProbeStampb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PsVec_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PsVec_2eproto_sccs[2] = {
  &scc_info_SendProbeStamp_PsVec_2eproto.base,
  &scc_info_SendProbeStampVec_PsVec_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PsVec_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PsVec_2eproto = {
  false, false, descriptor_table_protodef_PsVec_2eproto, "PsVec.proto", 244,
  &descriptor_table_PsVec_2eproto_once, descriptor_table_PsVec_2eproto_sccs, descriptor_table_PsVec_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_PsVec_2eproto::offsets,
  file_level_metadata_PsVec_2eproto, 2, file_level_enum_descriptors_PsVec_2eproto, file_level_service_descriptors_PsVec_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PsVec_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PsVec_2eproto)), true);
namespace PsVec {

// ===================================================================

void SendProbeStamp::InitAsDefaultInstance() {
  ::PsVec::_SendProbeStamp_default_instance_._instance.get_mutable()->m_tv_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SendProbeStamp::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& m_tv(const SendProbeStamp* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SendProbeStamp::_Internal::m_tv(const SendProbeStamp* msg) {
  return *msg->m_tv_;
}
void SendProbeStamp::clear_m_tv() {
  if (GetArena() == nullptr && m_tv_ != nullptr) {
    delete m_tv_;
  }
  m_tv_ = nullptr;
}
SendProbeStamp::SendProbeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PsVec.SendProbeStamp)
}
SendProbeStamp::SendProbeStamp(const SendProbeStamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_tv()) {
    m_tv_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.m_tv_);
  } else {
    m_tv_ = nullptr;
  }
  ::memcpy(&m_stream_, &from.m_stream_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_ttl_) -
    reinterpret_cast<char*>(&m_stream_)) + sizeof(m_ttl_));
  // @@protoc_insertion_point(copy_constructor:PsVec.SendProbeStamp)
}

void SendProbeStamp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendProbeStamp_PsVec_2eproto.base);
  ::memset(&m_tv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_ttl_) -
      reinterpret_cast<char*>(&m_tv_)) + sizeof(m_ttl_));
}

SendProbeStamp::~SendProbeStamp() {
  // @@protoc_insertion_point(destructor:PsVec.SendProbeStamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendProbeStamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete m_tv_;
}

void SendProbeStamp::ArenaDtor(void* object) {
  SendProbeStamp* _this = reinterpret_cast< SendProbeStamp* >(object);
  (void)_this;
}
void SendProbeStamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendProbeStamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendProbeStamp& SendProbeStamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendProbeStamp_PsVec_2eproto.base);
  return *internal_default_instance();
}


void SendProbeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:PsVec.SendProbeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && m_tv_ != nullptr) {
    delete m_tv_;
  }
  m_tv_ = nullptr;
  ::memset(&m_stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_ttl_) -
      reinterpret_cast<char*>(&m_stream_)) + sizeof(m_ttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendProbeStamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 m_stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          m_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 m_ttl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp m_tv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_tv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendProbeStamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PsVec.SendProbeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_stream = 1;
  if (this->m_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_m_stream(), target);
  }

  // uint32 m_sequence = 2;
  if (this->m_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_m_sequence(), target);
  }

  // uint32 m_ttl = 3;
  if (this->m_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_m_ttl(), target);
  }

  // .google.protobuf.Timestamp m_tv = 4;
  if (this->has_m_tv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::m_tv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PsVec.SendProbeStamp)
  return target;
}

size_t SendProbeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PsVec.SendProbeStamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp m_tv = 4;
  if (this->has_m_tv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_tv_);
  }

  // uint32 m_stream = 1;
  if (this->m_stream() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_stream());
  }

  // uint32 m_sequence = 2;
  if (this->m_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_sequence());
  }

  // uint32 m_ttl = 3;
  if (this->m_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_m_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendProbeStamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PsVec.SendProbeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const SendProbeStamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendProbeStamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PsVec.SendProbeStamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PsVec.SendProbeStamp)
    MergeFrom(*source);
  }
}

void SendProbeStamp::MergeFrom(const SendProbeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PsVec.SendProbeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m_tv()) {
    _internal_mutable_m_tv()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_m_tv());
  }
  if (from.m_stream() != 0) {
    _internal_set_m_stream(from._internal_m_stream());
  }
  if (from.m_sequence() != 0) {
    _internal_set_m_sequence(from._internal_m_sequence());
  }
  if (from.m_ttl() != 0) {
    _internal_set_m_ttl(from._internal_m_ttl());
  }
}

void SendProbeStamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PsVec.SendProbeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendProbeStamp::CopyFrom(const SendProbeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PsVec.SendProbeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendProbeStamp::IsInitialized() const {
  return true;
}

void SendProbeStamp::InternalSwap(SendProbeStamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendProbeStamp, m_ttl_)
      + sizeof(SendProbeStamp::m_ttl_)
      - PROTOBUF_FIELD_OFFSET(SendProbeStamp, m_tv_)>(
          reinterpret_cast<char*>(&m_tv_),
          reinterpret_cast<char*>(&other->m_tv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendProbeStamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendProbeStampVec::InitAsDefaultInstance() {
}
class SendProbeStampVec::_Internal {
 public:
};

SendProbeStampVec::SendProbeStampVec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_app_probes_ptr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PsVec.SendProbeStampVec)
}
SendProbeStampVec::SendProbeStampVec(const SendProbeStampVec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_app_probes_ptr_(from.m_app_probes_ptr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PsVec.SendProbeStampVec)
}

void SendProbeStampVec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendProbeStampVec_PsVec_2eproto.base);
}

SendProbeStampVec::~SendProbeStampVec() {
  // @@protoc_insertion_point(destructor:PsVec.SendProbeStampVec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendProbeStampVec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SendProbeStampVec::ArenaDtor(void* object) {
  SendProbeStampVec* _this = reinterpret_cast< SendProbeStampVec* >(object);
  (void)_this;
}
void SendProbeStampVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendProbeStampVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendProbeStampVec& SendProbeStampVec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendProbeStampVec_PsVec_2eproto.base);
  return *internal_default_instance();
}


void SendProbeStampVec::Clear() {
// @@protoc_insertion_point(message_clear_start:PsVec.SendProbeStampVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_app_probes_ptr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendProbeStampVec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PsVec.SendProbeStamp m_app_probes_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_app_probes_ptr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendProbeStampVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PsVec.SendProbeStampVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PsVec.SendProbeStamp m_app_probes_ptr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_app_probes_ptr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_m_app_probes_ptr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PsVec.SendProbeStampVec)
  return target;
}

size_t SendProbeStampVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PsVec.SendProbeStampVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PsVec.SendProbeStamp m_app_probes_ptr = 1;
  total_size += 1UL * this->_internal_m_app_probes_ptr_size();
  for (const auto& msg : this->m_app_probes_ptr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendProbeStampVec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PsVec.SendProbeStampVec)
  GOOGLE_DCHECK_NE(&from, this);
  const SendProbeStampVec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendProbeStampVec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PsVec.SendProbeStampVec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PsVec.SendProbeStampVec)
    MergeFrom(*source);
  }
}

void SendProbeStampVec::MergeFrom(const SendProbeStampVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PsVec.SendProbeStampVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_app_probes_ptr_.MergeFrom(from.m_app_probes_ptr_);
}

void SendProbeStampVec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PsVec.SendProbeStampVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendProbeStampVec::CopyFrom(const SendProbeStampVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PsVec.SendProbeStampVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendProbeStampVec::IsInitialized() const {
  return true;
}

void SendProbeStampVec::InternalSwap(SendProbeStampVec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_app_probes_ptr_.InternalSwap(&other->m_app_probes_ptr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendProbeStampVec::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PsVec
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PsVec::SendProbeStamp* Arena::CreateMaybeMessage< ::PsVec::SendProbeStamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PsVec::SendProbeStamp >(arena);
}
template<> PROTOBUF_NOINLINE ::PsVec::SendProbeStampVec* Arena::CreateMaybeMessage< ::PsVec::SendProbeStampVec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PsVec::SendProbeStampVec >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
